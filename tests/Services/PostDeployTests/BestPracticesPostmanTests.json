{
	"info": {
		"_postman_id": "4bcb0d93-c1fd-492f-9a0b-2e8230974f1c",
		"name": "Kros.AspNetCore.BestPractices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Seed",
			"item": [
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"Temp.AccessToken\",jsonData.access_token)",
									"",
									"pm.test(\"Token should be not empty\", function () {",
									"    pm.expect(pm.environment.get(\"Temp.AccessToken\").length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "Demo.BestPractices.Postman",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{OAuthUsername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{OAuthPassword}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{OAuthUrl}}",
							"host": [
								"{{OAuthUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hello",
			"item": [
				{
					"name": "Hello",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://www.mocky.io/v2/5d5a53a72f0000520036f4b9",
							"protocol": "http",
							"host": [
								"www",
								"mocky",
								"io"
							],
							"path": [
								"v2",
								"5d5a53a72f0000520036f4b9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations Api",
			"item": [
				{
					"name": "New organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"Temp.OrganizationId\", jsonData.id)",
									"",
									"pm.test(\"Organization should be created with code 201.\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Save organization values to variables",
									"var organization = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"Temp.OrganizationName\", organization.organizationName);",
									"pm.environment.set(\"Temp.BusinessId\", organization.businessId);",
									"pm.environment.set(\"Temp.Street\", organization.street);",
									"pm.environment.set(\"Temp.StreetNumber\", organization.streetNumber);",
									"pm.environment.set(\"Temp.City\", organization.city);",
									"pm.environment.set(\"Temp.ZipCode\", organization.zipCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"organizationName\": \"KROS a.s.\",\n\t\"businessId\": \"31635903\",\n\t\"street\": \"A. Rudnaya\",\n\t\"streetNumber\": \"21\",\n\t\"city\": \"Žilina\",\n\t\"zipCode\": \"010 01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var organization = pm.response.json();",
									"pm.environment.set(\"Temp.UserId\", organization.userId);",
									"",
									"pm.test(\"Organization info should be returned with code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Organization info should be object and not array.\", function () {",
									"    pm.expect(organization).to.be.an('object').but.not.an('array');",
									"});",
									"",
									"pm.test(\"Organization info should be in correct data format.\", function () {",
									"    pm.expect(tv4.validate(organization, pm.environment.get(\"Temp.OrganizationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Organization info should be correct.\", function () {",
									"    pm.expect(organization.id).to.eql(pm.environment.get(\"Temp.OrganizationId\"));",
									"    pm.expect(organization.organizationName).to.eql(pm.environment.get(\"Temp.OrganizationName\"));",
									"    pm.expect(organization.businessId).to.eql(pm.environment.get(\"Temp.BusinessId\"));",
									"    pm.expect(organization.street).to.eql(pm.environment.get(\"Temp.Street\"));",
									"    pm.expect(organization.streetNumber).to.eql(pm.environment.get(\"Temp.StreetNumber\"));",
									"    pm.expect(organization.city).to.eql(pm.environment.get(\"Temp.City\"));",
									"    pm.expect(organization.zipCode).to.eql(pm.environment.get(\"Temp.ZipCode\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Organization info should be updated with code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Save organization values to variables",
									"var organization = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"Temp.OrganizationName\", organization.organizationName);",
									"pm.environment.set(\"Temp.BusinessId\", organization.businessId);",
									"pm.environment.set(\"Temp.Street\", organization.street);",
									"pm.environment.set(\"Temp.StreetNumber\", organization.streetNumber);",
									"pm.environment.set(\"Temp.City\", organization.city);",
									"pm.environment.set(\"Temp.ZipCode\", organization.zipCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"organizationName\": \"STORMWARE s.r.o.\",\n\t\"businessId\": \"36244791\",\n\t\"street\": \"Matúšova\",\n\t\"streetNumber\": \"48\",\n\t\"city\": \"Bratislava\",\n\t\"zipCode\": \"811 04\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var organization = pm.response.json();",
									"",
									"pm.test(\"Organization info should be returned with code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Organization info should be object and not array.\", function () {",
									"    pm.expect(organization).to.be.an('object').but.not.an('array');",
									"});",
									"",
									"pm.test(\"Organization info should be in correct data format.\", function () {",
									"    pm.expect(tv4.validate(organization, pm.environment.get(\"Temp.OrganizationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Organization info should be correct.\", function () {",
									"    pm.expect(organization.id).to.eql(pm.environment.get(\"Temp.OrganizationId\"));",
									"    pm.expect(organization.organizationName).to.eql(pm.environment.get(\"Temp.OrganizationName\"));",
									"    pm.expect(organization.businessId).to.eql(pm.environment.get(\"Temp.BusinessId\"));",
									"    pm.expect(organization.street).to.eql(pm.environment.get(\"Temp.Street\"));",
									"    pm.expect(organization.streetNumber).to.eql(pm.environment.get(\"Temp.StreetNumber\"));",
									"    pm.expect(organization.city).to.eql(pm.environment.get(\"Temp.City\"));",
									"    pm.expect(organization.zipCode).to.eql(pm.environment.get(\"Temp.ZipCode\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const organizationSchema = {",
							"    \"required\": [\"id\", \"userId\", \"organizationName\", \"businessId\", \"street\",",
							"                 \"streetNumber\", \"city\", \"zipCode\"],",
							"    \"properties\": {",
							"        \"id\": {\"type\": \"integer\"},",
							"        \"userId\": {\"type\": \"integer\"},",
							"        \"organizationName\": {\"type\": \"string\"},",
							"        \"businessId\": {\"type\": \"string\"},",
							"        \"street\": {\"type\": \"string\"},",
							"        \"streetNumber\": {\"type\": \"string\"},",
							"        \"city\": {\"type\": \"string\"},",
							"        \"zipCode\": {\"type\": \"string\"}",
							"    }",
							"};",
							"",
							"pm.environment.set(\"Temp.OrganizationSchema\", organizationSchema);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users Api",
			"item": [
				{
					"name": "Is Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Is admin should be True\", function () {",
									"    pm.expect(pm.response.text()).to.eql(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/users/IsAdmin",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"users",
								"IsAdmin"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Users/IsAdmin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Users",
										"IsAdmin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<boolean>\""
						}
					]
				},
				{
					"name": "Is Writer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Is writer should be True\", function () {",
									"    pm.expect(pm.response.text()).to.eql(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/users/IsWriter",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"users",
								"IsWriter"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Users/IsAdmin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Users",
										"IsAdmin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<boolean>\""
						}
					]
				},
				{
					"name": "Is Reader",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Is reader should be True\", function () {",
									"    pm.expect(pm.response.text()).to.eql(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/users/IsReader",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"users",
								"IsReader"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Users/IsAdmin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Users",
										"IsAdmin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<boolean>\""
						}
					]
				},
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var users = pm.response.json();",
									"",
									"pm.test(\"Retrieving list of users should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Retrieving list of users should return an array but not an object.\", function () {",
									"    pm.expect(users).to.be.an('array').but.not.an('object');",
									"});",
									"",
									"pm.test(\"Users should be loaded\", function () {",
									"    pm.expect(users.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Retrieving list of users should return correct data format in each item.\", function () {",
									"    users.forEach(function(user) {",
									"         pm.expect(tv4.validate(user, pm.environment.get(\"Temp.UserSchema\"))).to.be.true;",
									"    });",
									"});",
									"",
									"pm.test(\"Retrieving list of users should return seeded item.\", function () {",
									"    var found = false;",
									"    ",
									"    users.forEach(function(user) {",
									"        if (user.id == pm.environment.get(\"Temp.UserId\")) {",
									"            found = true;",
									"        }",
									"    });",
									"    ",
									"    pm.expect(found).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/users",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Authorization/jwt-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Authorization",
										"jwt-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						}
					]
				},
				{
					"name": "User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.response.json();",
									"",
									"pm.test(\"Retrieving a single user should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Retrieving a single user should return an object.\", function () {",
									"    pm.expect(user).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Retrieving a single user should return correct data format.\", function () {",
									"    pm.expect(tv4.validate(user, pm.environment.get(\"Temp.UserSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Get user by id returns user's value\", function () {",
									"    pm.expect(user.id).to.eql(parseInt(pm.environment.get(\"Temp.UserId\")));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/users/{{Temp.UserId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"users",
								"{{Temp.UserId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Users/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Users",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"email\": \"<string>\",\n \"isAdmin\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Save user values to variables",
									"var user = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"Temp.FirstName\", user.firstName);",
									"pm.environment.set(\"Temp.LastName\", user.lastName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{OAuthUsername}}\"\r\n}"
						},
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/users/{{Temp.UserId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"users",
								"{{Temp.UserId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"isAdmin\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/Users/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Users",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Check updated value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var user = pm.response.json();",
									"",
									"pm.test(\"User info should be returned with code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User info should be object and not array.\", function () {",
									"    pm.expect(user).to.be.an('object').but.not.an('array');",
									"});",
									"",
									"pm.test(\"User info should be in correct data format.\", function () {",
									"    pm.expect(tv4.validate(user, pm.environment.get(\"Temp.UserSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"User info should be correct.\", function () {",
									"    pm.expect(user.id).to.eql(pm.environment.get(\"Temp.UserId\"));",
									"    pm.expect(user.firstName).to.eql(pm.environment.get(\"Temp.FirstName\"));",
									"    pm.expect(user.lastName).to.eql(pm.environment.get(\"Temp.LastName\"));",
									"    pm.expect(user.street).to.eql(pm.environment.get(\"{{OAuthUsername}}\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/users/{{Temp.UserId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"users",
								"{{Temp.UserId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Users/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Users",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"email\": \"<string>\",\n \"isAdmin\": \"<boolean>\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const userSchema = {",
							"    \"required\": [\"id\", \"firstName\", \"lastName\", \"email\"],",
							"    \"properties\": {",
							"        \"id\": {\"type\": \"integer\"},",
							"        \"firstName\": {\"type\": [\"null\", \"string\"]},",
							"        \"lastName\": {\"type\": [\"null\", \"string\"]},",
							"        \"email\": {\"type\": \"string\"}",
							"    }",
							"};",
							"",
							"pm.environment.set(\"Temp.UserSchema\", userSchema);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Todos Api",
			"item": [
				{
					"name": "Create Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"pm.environment.set(\"Temp.ToDoId\", response.id);",
									"",
									"pm.test(\"ToDo should be created with code 201.\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Creating ToDo should return valid JSON object with id.\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"});",
									"",
									"// Save todo values to variables",
									"var todo = JSON.parse(pm.request.body.raw);",
									"pm.environment.set(\"Temp.ToDoName\", todo.name);",
									"pm.environment.set(\"Temp.ToDoDescription\", todo.description);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomLoremWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\"\n}"
						},
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/ToDos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get All Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var todos = pm.response.json();",
									"",
									"pm.test(\"Retrieving list of ToDos should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Retrieving list of ToDos should return an array but not an object.\", function () {",
									"    pm.expect(todos).to.be.an('array').but.not.an('object');",
									"});",
									"",
									"pm.test(\"At least one ToDo should exist.\", function () {",
									"    pm.expect(todos.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Retrieving list of ToDos should return correct data format in each item.\", function () {",
									"    todos.forEach(function(todo) {",
									"         pm.expect(tv4.validate(todo, pm.environment.get(\"Temp.ToDoHeaderSchema\"))).to.be.true;",
									"    });",
									"});",
									"",
									"pm.test(\"Retrieving list of ToDos should return seeded item.\", function () {",
									"    var found = false;",
									"    ",
									"    todos.forEach(function(todo) {",
									"        if (todo.id == pm.environment.get(\"Temp.ToDoId\")) {",
									"            found = true;",
									"        }",
									"    });",
									"    ",
									"    pm.expect(found).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"isDone\": \"<boolean>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"isDone\": \"<boolean>\"\n }\n]"
						}
					]
				},
				{
					"name": "Change Is Done State",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updating ToDo state should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isDone\": true\n}"
						},
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos/changeIsDoneState/{{Temp.ToDoId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos",
								"changeIsDoneState",
								"{{Temp.ToDoId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDone\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/changeIsDoneState/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"changeIsDoneState",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDone\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/changeIsDoneState/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"changeIsDoneState",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDone\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/changeIsDoneState/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"changeIsDoneState",
										"<integer>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Check Todo state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.test(\"Getting ToDo should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Getting ToDo should return valid JSON object with correct id.\", function () {",
									"    pm.expect(tv4.validate(response, pm.environment.get(\"Temp.ToDoSchema\"))).to.be.true;",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"Temp.ToDoId\"));",
									"});",
									"",
									"pm.test(\"Updated ToDo state should be true.\", function () {",
									"    pm.expect(response.isDone).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos/{{Temp.ToDoId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos",
								"{{Temp.ToDoId}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"description\": \"<string>\",\n \"created\": \"<dateTime>\",\n \"lastChange\": \"<dateTime>\",\n \"userId\": \"<integer>\",\n \"isDone\": \"<boolean>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updating todo values should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"NewValueName\",\n    \"description\": \"NewValueDescription\",\n    \"isDone\": true\n}"
						},
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos/{{Temp.ToDoId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos",
								"{{Temp.ToDoId}}"
							]
						}
					},
					"response": [
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"isDone\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"isDone\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"isDone\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Check Todo updated values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.test(\"Getting ToDo should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Getting ToDo should return valid JSON object with correct id.\", function () {",
									"    pm.expect(tv4.validate(response, pm.environment.get(\"Temp.ToDoSchema\"))).to.be.true;",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"Temp.ToDoId\"));",
									"});",
									"",
									"pm.test(\"Updated ToDo state should be true.\", function () {",
									"    pm.expect(response.isDone).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos/{{Temp.ToDoId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos",
								"{{Temp.ToDoId}}"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"description\": \"<string>\",\n \"created\": \"<dateTime>\",\n \"lastChange\": \"<dateTime>\",\n \"userId\": \"<integer>\",\n \"isDone\": \"<boolean>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Delete Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting ToDo should return status code 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos/{{Temp.ToDoId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos",
								"{{Temp.ToDoId}}"
							]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete non-existing ToDo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting non-existing ToDo should return status code 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos/123456",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos",
								"123456"
							]
						}
					},
					"response": [
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"<integer>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Delete Completed Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting completed ToDos should return status code 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}/todos/deleteCompleted",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}",
								"todos",
								"deleteCompleted"
							]
						}
					},
					"response": [
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/deleteCompleted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"deleteCompleted"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<string>\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/ToDos/deleteCompleted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"ToDos",
										"deleteCompleted"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const toDoHeaderSchema = {",
							"    \"required\": [\"id\", \"name\", \"isDone\"],",
							"    \"properties\": {",
							"        \"id\": {\"type\": \"integer\"},",
							"        \"name\": {\"type\": \"string\"},",
							"        \"isDone\": {\"type\": \"boolean\"}",
							"    }",
							"};",
							"",
							"const toDoSchema = {",
							"    \"required\": [\"id\", \"name\", \"description\", \"created\", \"lastChange\", \"userId\",",
							"                 \"organizationId\", \"isDone\"],",
							"    \"properties\": {",
							"        \"id\": {\"type\": \"integer\"},",
							"        \"name\": {\"type\": \"string\"},",
							"        \"description\": {\"type\": \"string\"},",
							"        \"created\": {\"type\": \"string\"},",
							"        \"lastChange\": {\"type\": \"string\"},",
							"        \"userId\": {\"type\": \"integer\"},",
							"        \"organizationId\": {\"type\": \"integer\"},",
							"        \"isDone\": {\"type\": \"boolean\"}",
							"    }",
							"};",
							"",
							"pm.environment.set(\"Temp.ToDoHeaderSchema\", toDoHeaderSchema);",
							"pm.environment.set(\"Temp.ToDoSchema\", toDoSchema);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authorization Api",
			"item": [
				{
					"name": "Get Jwt Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var token = pm.response.text();",
									"",
									"pm.test(\"JWT token should be not empty\", function () {",
									"    pm.expect(token.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AuthorizationApiBaseUrl}}/api/Authorization/jwt-token",
							"host": [
								"{{AuthorizationApiBaseUrl}}"
							],
							"path": [
								"api",
								"Authorization",
								"jwt-token"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Authorization/jwt-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Authorization",
										"jwt-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						}
					]
				},
				{
					"name": "Unauthorized - wrong token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authorization with wrong token should return status code 401.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE1NjA0MTY1MDAsImV4cCI6MTU2MDQyNjUwMCwiaXNzIjoiaHR0cHM6Ly9kZXYubG9naW4ua3Jvcy53dGYiLCJhdWQiOlsiaHR0cHM6Ly9kZXYubG9naW4ua3Jvcy53dGYvcmVzb3VyY2VzIiwiRXN3Lkludm9pY2luZyJdLCJjbGllbnRfaWQiOiJJbnZvaWNpbmdQb3N0bWFuIiwic3ViIjoiMyIsImF1dGhfdGltZSI6MTU2MDQxNjUwMCwiaWRwIjoibG9jYWwiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0QGtyb3Muc2siLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9zaWQiOiIzIiwic2NvcGUiOlsiZW1haWwiLCJvcGVuaWQiLCJwcm9maWxlIiwiRXN3Lkludm9pY2luZyIsIm9mZmxpbmVfYWNjZXNzIl0sImFtciI6WyJwd2QiXX0.d6IkWD70zjyK0JbP0LTfjURShZRLgEIp0xzNx4tlZYI"
							}
						],
						"url": {
							"raw": "{{AuthorizationApiBaseUrl}}/api/Authorization/jwt-token",
							"host": [
								"{{AuthorizationApiBaseUrl}}"
							],
							"path": [
								"api",
								"Authorization",
								"jwt-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized - no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authorization without token should return status code 401.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AuthorizationApiBaseUrl}}/api/Authorization/jwt-token",
							"host": [
								"{{AuthorizationApiBaseUrl}}"
							],
							"path": [
								"api",
								"Authorization",
								"jwt-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete seeded organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test (\"Deleting seeded organization should return status code 204.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/organizations/{{Temp.OrganizationId}}",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"organizations",
								"{{Temp.OrganizationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function cleanup() {\r",
									"    const clean = _.keys(pm.environment.toObject())\r",
									"    _.each(clean, (arrItem) => {\r",
									"        if (arrItem.startsWith(\"Temp.\")) {\r",
									"            pm.environment.unset(arrItem)\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"cleanup();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cleanup should return status code 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "CLEANUP",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/cleanup",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"cleanup"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{Temp.AccessToken}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}