{
	"info": {
		"_postman_id": "c2ce2d68-862b-4ade-aaa5-1694fe76b319",
		"name": "General",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Get Jwt Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"Temp.AccessToken\") ||\r",
									"    pm.environment.get(\"Temp.AccessToken.Timeout\") < Date.now())\r",
									"{\r",
									"    pm.sendRequest(\r",
									"        {\r",
									"            url: pm.environment.get(\"OAuthUrl\"),\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/x-www-form-urlencoded',\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'urlencoded',\r",
									"                urlencoded: [\r",
									"                    {key: \"client_id\", value: \"Demo.BestPractices.Postman\", disabled: false},\r",
									"                    {key: \"grant_type\", value: \"password\", disabled: false},\r",
									"                    {key: \"username\", value: pm.environment.get(\"OAuthUsername\"), disabled: false},\r",
									"                    {key: \"password\", value: pm.environment.get(\"OAuthPassword\"), disabled: false}\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"        function (err, res) {\r",
									"            pm.environment.set(\"Temp.AccessToken\", res.json().access_token);\r",
									"            var now = new Date();\r",
									"            var timeout = now.setMinutes(now.getMinutes() + 20);\r",
									"            pm.environment.set(\"Temp.AccessToken.Timeout\", timeout);\r",
									"        }\r",
									"    );\r",
									"}\r",
									"\r",
									"if (!pm.environment.get(\"Temp.ForeignAccessToken\") ||\r",
									"    pm.environment.get(\"Temp.ForeignAccessToken.Timeout\") < Date.now())\r",
									"{\r",
									"    pm.sendRequest(\r",
									"        {\r",
									"            url: pm.environment.get(\"OAuthUrl\"),\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/x-www-form-urlencoded',\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'urlencoded',\r",
									"                urlencoded: [\r",
									"                    {key: \"client_id\", value: \"Demo.BestPractices.Postman\", disabled: false},\r",
									"                    {key: \"grant_type\", value: \"password\", disabled: false},\r",
									"                    {key: \"username\", value: pm.environment.get(\"OAuthForeignUsername\"), disabled: false},\r",
									"                    {key: \"password\", value: pm.environment.get(\"OAuthForeignPassword\"), disabled: false}\r",
									"                ]\r",
									"            }\r",
									"        },\r",
									"        function (err, res) {\r",
									"            pm.environment.set(\"Temp.ForeignAccessToken\", res.json().access_token);\r",
									"            var now = new Date();\r",
									"            var timeout = now.setMinutes(now.getMinutes() + 20);\r",
									"            pm.environment.set(\"Temp.ForeignAccessToken.Timeout\", timeout);\r",
									"        }\r",
									"    );\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"JWT token request should return status code 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var token = pm.response.text();",
									"    pm.test(\"JWT token should be not empty\", function () {",
									"        pm.expect(token.length).to.be.above(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Temp.AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AuthorizationApiBaseUrl}}/api/Authorization/jwt-token",
							"host": [
								"{{AuthorizationApiBaseUrl}}"
							],
							"path": [
								"api",
								"Authorization",
								"jwt-token"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Authorization/jwt-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Authorization",
										"jwt-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						}
					]
				},
				{
					"name": "Unauthorized - wrong token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authorization with wrong token should return status code 401.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE1NjA0MTY1MDAsImV4cCI6MTU2MDQyNjUwMCwiaXNzIjoiaHR0cHM6Ly9kZXYubG9naW4ua3Jvcy53dGYiLCJhdWQiOlsiaHR0cHM6Ly9kZXYubG9naW4ua3Jvcy53dGYvcmVzb3VyY2VzIiwiRXN3Lkludm9pY2luZyJdLCJjbGllbnRfaWQiOiJJbnZvaWNpbmdQb3N0bWFuIiwic3ViIjoiMyIsImF1dGhfdGltZSI6MTU2MDQxNjUwMCwiaWRwIjoibG9jYWwiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0QGtyb3Muc2siLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9zaWQiOiIzIiwic2NvcGUiOlsiZW1haWwiLCJvcGVuaWQiLCJwcm9maWxlIiwiRXN3Lkludm9pY2luZyIsIm9mZmxpbmVfYWNjZXNzIl0sImFtciI6WyJwd2QiXX0.d6IkWD70zjyK0JbP0LTfjURShZRLgEIp0xzNx4tlZYI"
							}
						],
						"url": {
							"raw": "{{AuthorizationApiBaseUrl}}/api/Authorization/jwt-token",
							"host": [
								"{{AuthorizationApiBaseUrl}}"
							],
							"path": [
								"api",
								"Authorization",
								"jwt-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized - no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authorization without token should return status code 401.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AuthorizationApiBaseUrl}}/api/Authorization/jwt-token",
							"host": [
								"{{AuthorizationApiBaseUrl}}"
							],
							"path": [
								"api",
								"Authorization",
								"jwt-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Swagger",
			"item": [
				{
					"name": "Documentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request for Swagger documentation should return 404 in production otherwise 200.\" , function () {\r",
									"    if (pm.variables.get(\"Environment\").toLowerCase().startsWith(\"prod\")) {\r",
									"        pm.response.to.have.status(404);\r",
									"    } else {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseGatewayUri}}/swagger",
							"host": [
								"{{ApiBaseGatewayUri}}"
							],
							"path": [
								"swagger"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}